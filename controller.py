import requests
import asyncio

API_URL = "http://127.0.0.1:8080/"
TTS_SERVER = "http://127.0.0.1:3000/generate_voice"

async def generate_story():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ OpenRouter.ai —á–µ—Ä–µ–∑ Flask API"""
    response = requests.get(f"{API_URL}/get-item")
    data = response.json()

    if not data["status"]:
        print("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º!")
        return

    topic = data["topic"]
    print(f"üéô –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ —Ç–µ–º—É: {topic}")

    response = requests.post(f"{API_URL}/generate", json={"topic": topic})

    try:
        if response.status_code == 200:
            story = response.json().get("story", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}, {response.text}")
            return
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        story = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö!"

    print(f"üìú –°—Ü–µ–Ω–∞—Ä–∏–π:\n{story}")

    dialogues = parse_dialogue(story)
    for dialogue in dialogues:
        audio_path = request_voice(dialogue["character"], dialogue["text"])
        print(f"üîä –ê—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path}")

def parse_dialogue(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–ª–∏–∫."""
    lines = text.split("\n")
    dialogues = []
    
    for line in lines:
        parts = line.split(":")
        if len(parts) == 2:
            character = parts[0].strip()
            dialogue = parts[1].strip()
            dialogues.append({"character": character, "text": dialogue})

    return dialogues

def request_voice(character, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ TTS –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª."""
    speaker_map = {
        "–í–ª–∞–¥–∏–º–∏—Ä –ñ–∏—Ä–∏–Ω–æ–≤—Å–∫–∏–π": "zhirinovskiy",
        "–î–º–∏—Ç—Ä–∏–π –ì–æ—Ä–¥–æ–Ω": "gordon"
    }

    speaker = speaker_map.get(character, "zhirinovskiy")

    payload = {"text": text, "speaker": speaker}

    try:
        response = requests.post(TTS_SERVER, json=payload, timeout=60)
        return response.json().get("audio_wav_path", "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TTS: {e}")
        return None

async def main():
    while True:
        await generate_story()
        await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
